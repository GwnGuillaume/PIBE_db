% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/global.R
\name{get_geodf_centre_point}
\alias{get_geodf_centre_point}
\title{Get Centre Point from GeoDataFrame}
\usage{
get_geodf_centre_point(geodf)
}
\arguments{
\item{geodf}{The GeoDataFrame containing spatial data.}
}
\value{
A dataframe representing the coordinates of the centre point.
}
\description{
This function calculates the centre point from a GeoDataFrame by creating 
a concave hull around the combined points.
}
\details{
#' 
#' @title Read Sensor Data from Excel File
#' @description This function reads sensor data from an Excel file and returns a dataframe.
#' @param xlsx_filename The path to the Excel file.
#' @param sheetname The name or index of the sheet containing the sensor data.
#' @return A dataframe containing the sensor data.
#' @details This function uses the `read_xlsx` function to read sensor data from a specified 
#' sheet in an Excel file. It then removes rows with NA values only and returns the resulting dataframe.
#' @examples
#' \dontrun{
#' # Example usage
#' xlsx_filename <- ...  # Replace with your file path
#' sheetname <- ...  # Replace with your sheet name or index
#' sensor_data <- sensor_xlsx_file_to_df(xlsx_filename, sheetname)
#' }
#' @export
get_sensor_info_xlsx <- function(sensor_filename, sheetname){
  cat(file = stderr(), paste0("\n\t| Get information about sensors from ",  sensor_filename, "\n"))
  sensors_tmp <- sensor_xlsx_file_to_df(xlsx_filename = sensor_filename, 
                                        sheetname = sheetname)
  sensors_tmp <- sensors_tmp %>% 
    mutate(`date/heure/min début` = format(`date/heure/min début`, format = "%Y-%m-%d %H:%M:%S", usetz = FALSE)) %>% 
    separate(col = `Coordonnées GPS`, 
             into = c("latitude", "longitude", "latdeg", "longdeg"), 
             sep = " ", convert = TRUE) %>% 
    mutate(latitude = str_sub(latitude, 1, -2)) %>%   
    mutate(latitude = as.numeric(latitude))  %>% 
    mutate(longitude = as.numeric(longitude)) %>% 
    mutate(latdeg = str_sub(latdeg, 2, -1)) %>%    # remove parenthesis
    mutate(longdeg = str_sub(longdeg, 1, -2)) %>%
    fill(`date/heure/min début`) %>%               # fill column with previous row value if na 
    fill(`date/heure/min fin`) %>% 
    fill(capteurs) %>% 
    fill(emplacement)
  sensors_tmp$name <- ifelse(startsWith(sensors_tmp$`Références (cf protocole exp)`, prefix = "LD_"), 
                             str_remove(sensors_tmp$`Références (cf protocole exp)`, pattern = "LD_"), 
                             sensors_tmp$`Références (cf protocole exp)`)
  sensors_tmp$name <- tolower(sensors_tmp$name)
  # Set the reference geometry
  ref_point_coords <- data.frame(latitude = sensors_tmp$latitude[which(sensors_tmp$emplacement == "mât")[1]], 
                                 longitude = sensors_tmp$longitude[which(sensors_tmp$emplacement == "mât")[1]])
  # Project geometries relatively to the reference one
  sensors_tmp$lat <- NA
  sensors_tmp$lat[which(sensors_tmp$emplacement == "mât")] <- 0
  sensors_tmp$lat[which(sensors_tmp$emplacement != "mât")] <- sensors_tmp$latitude[which(sensors_tmp$emplacement != "mât")] 
                                                              - ref_point_coords$latitude
  sensors_tmp$latitude <- sensors_tmp$lat
  sensors_tmp$lon <- NA
  sensors_tmp$lon[which(sensors_tmp$emplacement == "mât")] <- 0
  sensors_tmp$lon[which(sensors_tmp$emplacement != "mât")] <- sensors_tmp$longitude[which(sensors_tmp$emplacement != "mât")] 
                                                              - ref_point_coords$longitude
  sensors_tmp$longitude <- sensors_tmp$lon
  sensors_tmp <- subset(sensors_tmp, select = -c(latdeg, longdeg, `Coordonnées GPS_2 (HL)`, Notes))
  sensors <- st_as_sf(x = sensors_tmp,
                      coords = c("longitude", "latitude"), 
                      crs = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0", 
                      na.fail = FALSE)
  sensors <- sensors[!sf::st_is_empty(sensors$geometry), ]  # Remove rows with empty geometry
  
  return(list(sensors = sensors, ref_point_coords = ref_point_coords))
}

This function takes a GeoDataFrame, combines the points, and constructs a 
concave hull around them. It then calculates the centre point of the concave hull 
and returns the coordinates as a dataframe.
}
\section{functions_mapping}{
 Geographical data mapping utilities
}

\examples{
\dontrun{
# Example usage
geodf <- ...  # Replace with your GeoDataFrame
centre_point <- get_geodf_centre_point(geodf)
}
}
